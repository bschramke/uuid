import java.nio.file.Files
import java.nio.file.Paths

apply plugin: 'com.jfrog.bintray'

// Load `local.properties` file, if it exists. You can put your bintrayUser and bintrayApiKey values there, that file is ignored by git
if (Files.exists(Paths.get("$project.rootDir/local.properties"))) {
    def localProperties = new Properties()
    localProperties.load(new FileInputStream("$project.rootDir/local.properties"))
    localProperties.each { prop -> project.ext.set(prop.key, prop.value) }
}

bintray {
    dryRun = false
    user = project.hasProperty('bintray.user') ? project.property('bintray.user') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintray.apikey') ? project.property('bintray.apikey') : System.getenv('BINTRAY_API_KEY')
    publish = true
    override = true // for multi-platform Kotlin/Native publishing

    pkg {
        repo = 'maven'
        name = 'uuid'
        desc = POM_DESCRIPTION
        licenses = ['MIT']
        websiteUrl = POM_URL
        issueTrackerUrl = POM_URL
        vcsUrl = POM_SCM_URL
        publicDownloadNumbers = true
        version {
            name = project.version
            vcsTag = project.version
            released = new Date()
        }
    }
}

// TODO this is required for K/N publishing
bintrayUpload.dependsOn publishToMavenLocal

// This is for easier debugging of bintray uploading problems
bintrayUpload.doFirst {
    publications = project.publishing.publications.findAll {
        !it.name.contains('-test')
    }.collect {
        println("Uploading artifact '$it.groupId:$it.artifactId:$it.version' from publication '$it.name'")
        it.name
    }
}